// Generated by CoffeeScript 1.4.0
(function() {
  var Controls, Renderer, World, k_interface, k_world,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  (function() {
    var bodyEl, nav, startTop;
    bodyEl = $('body');
    nav = $('#nav');
    startTop = $('#start');
    if ((startTop != null) && startTop.length > 0) {
      startTop = startTop.offset().top - 10;
      $('#main .content').height($('.help.content').height() + 'px');
    }
    nav.delegate('li', 'touchend mouseup', function(e) {
      var active, id, obj;
      e.preventDefault();
      e.stopPropagation();
      obj = $(this);
      id = this.id;
      active = nav.find('.active').removeClass('active');
      bodyEl.removeClass(active.attr('id')).addClass(id);
      obj.addClass('active');
      return $('html, body').animate({
        scrollTop: startTop
      }, 190);
    });
    return window.scrollTo(0, 1);
  })();

  (function() {
    var time, vendor, vendors, _i, _len;
    time = 0;
    vendors = ['ms', 'moz', 'webkit', 'o'];
    for (_i = 0, _len = vendors.length; _i < _len; _i++) {
      vendor = vendors[_i];
      if (!(!window.requestAnimationFrame)) {
        continue;
      }
      window.requestAnimationFrame = window[vendor + 'RequestAnimationFrame'];
      window.cancelRequestAnimationFrame = window[vendor + 'CancelRequestAnimationFrame'];
    }
    if (!window.requestAnimationFrame) {
      window.requestAnimationFrame = function(callback, element) {
        var delta, now, old;
        now = new Date().getTime();
        delta = Math.max(0, 16 - (now - old));
        setTimeout((function() {
          return callback(time + delta);
        }), delta);
        return old = now + delta;
      };
    }
    if (!window.cancelAnimationFrame) {
      return window.cancelAnimationFrame = function(id) {
        return clearTimeout(id);
      };
    }
  })();

  Renderer = (function() {

    function Renderer() {
      this.setSize = __bind(this.setSize, this);      this.TO_RADIAN = Math.PI / 180;
      this.TWO_PI = Math.PI * 2;
      this.width = 0;
      this.height = 0;
      this.landscape = 0;
      this.centerX = 0;
      this.centerY = 0;
      this.initialized = false;
      this.renderTime = 0;
      this.cnvs = document.createElement('canvas');
      this.ctx = this.cnvs.getContext('2d');
      this.mirror = document.createElement('canvas');
      this.mctx = this.mirror.getContext('2d');
      this.offscrn = document.createElement('canvas');
      this.octx = this.offscrn.getContext('2d');
      this.bleeding = false;
      this.reflecting = false;
    }

    Renderer.prototype.init = function(physics) {
      return this.initialized = true;
    };

    Renderer.prototype.render = function(physics) {
      var direction, p, s, time, vel, _i, _j, _len, _len1, _ref, _ref1;
      if (!this.initialized) {
        this.init(physics);
      }
      time = new Date().getTime();
      vel = new Vector();
      direction = new Vector();
      if (!this.bleeding) {
        this.cnvs.width = this.cnvs.width;
      }
      _ref = physics.particles;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        this.ctx.fillStyle = p.colour || '#FFFFFF';
        if (p.shape === 'pentagon') {
          this.drawPentagon(p);
        } else if (p.shape === 'square') {
          this.drawSquare(p);
        } else if (p.shape === 'special') {
          this.drawCat(p);
        } else if (p.shape === 'triangle') {
          this.drawTriangle(p);
        } else {
          this.drawCircle(p);
        }
      }
      this.ctx.strokeStyle = 'rgba(249, 249, 222, 0.1)';
      this.ctx.beginPath();
      _ref1 = physics.springs;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        s = _ref1[_j];
        this.ctx.moveTo(s.p1.pos.x, s.p1.pos.y);
        this.ctx.lineTo(s.p2.pos.x, s.p2.pos.y);
      }
      this.ctx.stroke();
      this.ctx.fillStyle = 'rgba(255,255,255,0.2)';
      this.ctx.beginPath();
      this.ctx.arc(this.mouse.pos.x, this.mouse.pos.y, 20, 0, this.TWO_PI);
      this.ctx.fill();
      if (this.reflecting) {
        this.octx.clearRect(0, 0, this.width, this.height);
        this.mctx.fillStyle = '#f9f9de';
        this.octx.save();
        this.octx.beginPath();
        this.octx.moveTo(0, 0);
        this.octx.lineTo(this.centerX, this.centerY);
        this.octx.lineTo(0, this.centerY);
        this.octx.lineTo(0, 0);
        this.octx.closePath();
        this.octx.clip();
        this.octx.drawImage(this.cnvs, 0, 0);
        this.octx.restore();
        this.octx.save();
        this.octx.globalCompositeOperation = 'destination-over';
        this.octx.translate(this.centerX, this.centerY);
        this.octx.scale(-1, 1);
        this.octx.rotate((180 * this.TO_RADIAN) - Math.atan(this.centerY / this.centerX) * 2);
        this.octx.drawImage(this.offscrn, -this.centerX, -this.centerY);
        this.octx.scale(-1, 1);
        this.octx.drawImage(this.offscrn, this.centerX, -this.centerY);
        this.octx.restore();
        if (this.landscape === 90) {
          this.octx.save();
          this.octx.globalCompositeOperation = 'destination-over';
          this.octx.translate(this.centerX, this.centerY);
          this.octx.scale(-1, 1);
          this.octx.rotate((135 * this.TO_RADIAN) - Math.atan(this.centerY / this.centerX) * 2.4);
          this.octx.drawImage(this.offscrn, -this.centerX, -this.centerY);
          this.octx.scale(-1, 1);
          this.octx.drawImage(this.offscrn, this.centerX, -this.centerY);
          this.octx.restore();
        }
        this.octx.clearRect(this.centerX, 0, this.centerX, this.height);
        this.octx.clearRect(0, this.centerY, this.width, this.centerY);
        this.octx.save();
        this.octx.translate(this.centerX, this.centerY);
        this.octx.scale(-1, -1);
        this.octx.drawImage(this.offscrn, -this.centerX, -this.centerY);
        this.octx.scale(-1, 1);
        this.octx.drawImage(this.offscrn, -this.centerX, -this.centerY);
        this.octx.restore();
        this.mctx.fillRect(0, 0, this.width, this.height);
        this.mctx.drawImage(this.offscrn, 0, 0);
      }
      return this.renderTime = new Date().getTime() - time;
    };

    Renderer.prototype.drawCat = function(p) {
      this.ctx.beginPath();
      this.ctx.moveTo(p.pos.x - p.radius, p.pos.y);
      this.ctx.lineTo(p.pos.x - p.radius, p.pos.y - p.radius * 1.5);
      this.ctx.lineTo(p.pos.x, p.pos.y);
      this.ctx.arc(p.pos.x, p.pos.y, p.radius, 0, this.TWO_PI, false);
      this.ctx.moveTo(p.pos.x + p.radius, p.pos.y);
      this.ctx.lineTo(p.pos.x + p.radius, p.pos.y - p.radius * 1.5);
      this.ctx.lineTo(p.pos.x, p.pos.y);
      this.ctx.arc(p.pos.x, p.pos.y, p.radius, 0, this.TWO_PI, false);
      this.ctx.closePath();
      return this.ctx.fill();
    };

    Renderer.prototype.drawCircle = function(p) {
      this.ctx.beginPath();
      this.ctx.arc(p.pos.x, p.pos.y, p.radius, 0, this.TWO_PI, false);
      this.ctx.closePath();
      return this.ctx.fill();
    };

    Renderer.prototype.drawPentagon = function(p) {
      this.ctx.beginPath();
      this.ctx.moveTo(p.pos.x, p.pos.y - p.radius);
      this.ctx.lineTo(p.pos.x - p.radius, p.pos.y);
      this.ctx.lineTo(p.pos.x + -p.radius * 0.5, p.pos.y + p.radius * (Math.sqrt(3) / 2));
      this.ctx.lineTo(p.pos.x + p.radius * 0.5, p.pos.y + p.radius * (Math.sqrt(3) / 2));
      this.ctx.lineTo(p.pos.x + p.radius, p.pos.y);
      this.ctx.lineTo(p.pos.x, p.pos.y - p.radius);
      this.ctx.closePath();
      return this.ctx.fill();
    };

    Renderer.prototype.drawSquare = function(p) {
      this.ctx.beginPath();
      this.ctx.fillRect(p.pos.x - p.radius, p.pos.y - p.radius, p.radius * 2, p.radius * 2);
      this.ctx.closePath();
      return this.ctx.fill();
    };

    Renderer.prototype.drawTriangle = function(p) {
      var side;
      side = ~~(p.radius * (6 / Math.sqrt(3)));
      this.ctx.beginPath();
      this.ctx.moveTo(p.pos.x, p.pos.y - p.radius);
      this.ctx.lineTo(p.pos.x - side / 5, p.pos.y + side / 5);
      this.ctx.lineTo(p.pos.x + side / 5, p.pos.y + side / 5);
      this.ctx.closePath();
      return this.ctx.fill();
    };

    Renderer.prototype.reset = function() {
      this.cnvs.width = this.cnvs.width;
      this.mirror.width = this.mirror.width;
      this.offscrn.width = this.offscrn.width;
      return this.initialized = false;
    };

    Renderer.prototype.setSize = function(width, height) {
      this.landscape = width > height ? 90 : 0;
      this.width = width;
      this.height = height;
      this.centerX = this.width / 2;
      this.centerY = this.height / 2;
      this.cnvs.width = this.width;
      this.cnvs.height = this.height;
      this.mirror.width = this.width;
      this.mirror.height = this.height;
      this.offscrn.width = this.width;
      return this.offscrn.height = this.height;
    };

    return Renderer;

  })();

  World = (function() {

    function World() {
      this.resize = __bind(this.resize, this);
      this.mousemove = __bind(this.mousemove, this);      this.COLORS = COLOR_THEMES[0];
      this.THEMES = COLOR_THEMES;
      this.width = window.innerWidth;
      this.height = window.innerHeight;
    }

    World.prototype.init = function(container, renderer) {
      var startType;
      this.container = container;
      this.renderer = renderer;
      this.setup();
      startType = (typeof Modernizr !== "undefined" && Modernizr !== null) && Modernizr.touch ? 'touchmove' : 'mouseup';
      this.container.addEventListener(startType, this.mousemove, false);
      document.addEventListener('resize', this.resize, false);
      window.addEventListener('resize', this.resize, false);
      window.addEventListener('orientationchange', this.resize, false);
      this.container.appendChild(this.renderer.cnvs);
      this.container.appendChild(this.renderer.mirror);
      return this.resize();
    };

    World.prototype.setup = function() {
      var max;
      max = Math.max(this.width, this.height);
      this.renderTime = 0;
      this.counter = 0;
      this.physics = new Physics();
      this.mouse = new Particle();
      this.mouse.fixed = true;
      this.mouse.pos.set(this.width / 2, this.height / 2);
      this.physics.particles.push(this.mouse);
      this.max = 400;
      this.physics.integrator = new ImprovedEuler();
      this.center = new Attraction(this.mouse.pos, 500, 1200);
      this.edge = new EdgeWrap(new Vector(0, 0), new Vector(max, max));
      this.renderer.mouse = this.mouse;
      return this.renderer.init(this.physics);
    };

    World.prototype.addShape = function(type) {
      var i, max, p, s, size, _i;
      max = ~~Random(3, 10);
      size = this.physics.particles.length;
      if (size + max > this.max) {
        this.physics.particles.splice(1, (size + max) - this.max);
        this.physics.springs.splice(1, (size + max) - this.max);
      }
      for (i = _i = max; max <= 0 ? _i <= 0 : _i >= 0; i = max <= 0 ? ++_i : --_i) {
        p = new Particle(Random(0.1, 4.0));
        p.setRadius(~~(p.mass * 15));
        p.behaviours.push(new Wander(0.5, 700, Random(1.0, 2.0)));
        p.behaviours.push(this.center);
        p.behaviours.push(this.edge);
        p.moveTo(new Vector(~~Random(this.width), ~~Random(this.height)));
        p.colour = this.COLORS[(size + max - i) % this.COLORS.length];
        p.shape = type;
        s = new Spring(this.mouse, p, Random(30, 300), Random(0, 1.0));
        this.physics.particles.push(p);
        this.physics.springs.push(s);
      }
      return this.renderWorld();
    };

    World.prototype.mousemove = function(event) {
      var touch;
      event.preventDefault();
      if (event.touches && !!event.touches.length) {
        touch = event.touches[0];
        return this.mouse.pos.set(touch.pageX, touch.pageY);
      } else {
        return this.mouse.pos.set(event.clientX, event.clientY);
      }
    };

    World.prototype.resize = function(event) {
      var size, themeh;
      this.width = window.innerWidth;
      this.height = window.innerHeight;
      if (event != null) {
        $('body').height(window.innerHeight + 100 + 'px');
        window.scrollTo(0, 1);
        $('body').height(window.innerHeight + 'px');
      }
      this.landscape = this.width > this.height ? 90 : 0;
      this.container.style.width = this.width + 'px';
      this.container.style.height = this.height + 'px';
      this.mouse.pos.set(this.width / 2, this.height / 2);
      this.renderer.setSize(this.width, this.height);
      this.renderWorld();
      size = this.THEMES.length;
      themeh = this.width / (size * 4);
      return $('#color-themes li span').height(themeh + 'px');
    };

    World.prototype.renderWorld = function() {
      return this.renderer.render(this.physics);
    };

    World.prototype.setTheme = function(theme) {
      var i, p, _i, _len, _ref;
      if (theme != null) {
        theme = parseInt(theme, 10);
        this.COLORS = this.THEMES[theme];
      }
      _ref = this.physics.particles;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        p = _ref[i];
        p.colour = this.COLORS[(_len - i) % this.COLORS.length];
      }
      return this.renderWorld();
    };

    World.prototype.step = function() {
      this.physics.step();
      if (++this.counter % 3 === 0) {
        return this.renderWorld();
      }
    };

    return World;

  })();

  Controls = (function() {

    function Controls() {
      this.update = __bind(this.update, this);
      this.toggleThemes = __bind(this.toggleThemes, this);
      this.togglePixelate = __bind(this.togglePixelate, this);
      this.togglePause = __bind(this.togglePause, this);
      this.toggleMirrors = __bind(this.toggleMirrors, this);
      this.toggleMenu = __bind(this.toggleMenu, this);
      this.toggleEdit = __bind(this.toggleEdit, this);
      this.toggleBleed = __bind(this.toggleBleed, this);
      this.step = __bind(this.step, this);
      this.selectTheme = __bind(this.selectTheme, this);
      this.resetAll = __bind(this.resetAll, this);
      this.exportAll = __bind(this.exportAll, this);
      this.addShape = __bind(this.addShape, this);      this.playing = false;
    }

    Controls.prototype.init = function(world) {
      var action, item;
      this.world = world;
      this.playing = true;
      this.pixelate = false;
      this.pixelImgId = 'pixel-img';
      this.update();
      this.themes = $('#color-themes').hide();
      this.items = {};
      this.actions = {
        'kaleidoscope': this.toggleMirrors,
        'pixelate': this.togglePixelate,
        'bleed': this.toggleBleed,
        'colors': this.toggleThemes,
        'edit': this.toggleEdit,
        'hide': this.toggleMenu,
        'animate': this.togglePause,
        'reset': this.resetAll,
        'screenshot a': this.exportAll
      };
      if (Modernizr.touch) {
        this.startEvent = 'touchmove touchend';
      } else {
        this.startEvent = 'mousedown';
      }
      for (action in this.actions) {
        item = $('#' + action);
        item.bind(this.startEvent, this.actions[action]);
        item.data('action', action);
        this.items[action] = item;
      }
      this.setupColors();
      this.toggleEdit();
      $('li.shape').bind(this.startEvent, this.addShape);
      $(this.world.container).bind(this.startEvent, this.step);
      if (!Modernizr.localstorage) {
        return this.items['screenshot a'].remove();
      }
    };

    Controls.prototype.addShape = function(e) {
      if (e != null) {
        e.stopPropagation();
      }
      return this.world.addShape($(e.target).parent().attr('id'));
    };

    Controls.prototype.exportAll = function(e) {
      var data;
      e.stopPropagation();
      e.preventDefault();
      if (this.pixelate) {
        data = $('#' + this.pixelImgId)[0].toDataURL('jpg/image');
      } else if (this.world.renderer.reflecting) {
        data = this.world.renderer.mirror.toDataURL('jpg/image');
      } else {
        data = this.world.renderer.cnvs.toDataURL('jpg/image');
      }
      return localStorage.setItem('kaleidoscope_screenshot', data);
    };

    Controls.prototype.pause = function(e) {
      this.items['animate'].removeClass('playing').addClass('paused');
      return this.playing = false;
    };

    Controls.prototype.play = function() {
      this.items['animate'].removeClass('paused').addClass('playing');
      this.items['edit'].removeClass('open');
      this.items['reset'].hide;
      this.playing = true;
      if (this.pixelate) {
        return this.togglePixelate();
      }
    };

    Controls.prototype.removeSpring = function(time) {
      var index, removed;
      if (time % 500 === 0) {
        index = ~~Random(1, this.world.physics.springs.length - 1);
        removed = this.world.physics.springs[index];
        if (removed != null) {
          removed.p2.behaviours.push(new Attraction(removed.p1.pos, 500, -2000));
          return this.world.physics.springs.splice(index, 1);
        }
      }
    };

    Controls.prototype.resetAll = function(e) {
      if (e != null) {
        e.stopPropagation();
        e.preventDefault();
      }
      if (confirm('Clear all of the things? You sure?')) {
        this.pixelate = false;
        this.items['pixelate'].removeClass('active');
        this.pause();
        this.items['edit'].addClass('open');
        this.world.physics.destroy();
        this.world.physics = null;
        this.world.renderer.reset();
        this.world.setup();
        localStorage.setItem('kaleidoscope_screenshot', '');
        $('#' + this.pixelImgId).remove();
        $(this.world.renderer.cnvs).show();
        return $(this.world.renderer.mirror).show();
      }
    };

    Controls.prototype.selectTheme = function(e) {
      if (e != null) {
        e.stopPropagation();
      }
      this.world.setTheme($(e.target).parent().attr('id'));
      return this.toggleThemes();
    };

    Controls.prototype.setupColors = function() {
      var color, i, li, size, theme, themeh, _i, _j, _len, _len1, _ref, _results;
      size = this.world.THEMES.length;
      themeh = this.world.width / (size * 4);
      _ref = this.world.THEMES;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        theme = _ref[i];
        li = $('<li>').attr('id', i + '_theme');
        li.append($('<h2>').text(i));
        for (_j = 0, _len1 = theme.length; _j < _len1; _j++) {
          color = theme[_j];
          li.append($('<span style="background-color:' + color + '; height:' + themeh + 'px">'));
        }
        this.themes.append(li);
        _results.push(li.bind(this.startEvent, this.selectTheme));
      }
      return _results;
    };

    Controls.prototype.step = function(e) {
      if (!this.playing) {
        this.world.step();
        return this.world.renderer.render(this.world.physics);
      }
    };

    Controls.prototype.toggleBleed = function(e) {
      if (e != null) {
        e.stopPropagation();
      }
      this.world.renderer.bleeding = !this.world.renderer.bleeding;
      this.items['bleed'].toggleClass('active');
      if (!this.playing) {
        return this.world.renderer.render(this.world.physics);
      }
    };

    Controls.prototype.toggleEdit = function(e) {
      if (e != null) {
        e.stopPropagation();
      }
      this.items['edit'].toggleClass('open');
      if (this.items['edit'].hasClass('open')) {
        this.pause();
        return this.items['reset'].show();
      } else {
        this.play();
        this.items['colors'].removeClass('active');
        this.themes.hide();
        return this.items['reset'].hide();
      }
    };

    Controls.prototype.toggleMenu = function(e) {
      if (e != null) {
        e.stopPropagation();
      }
      this.items['hide'].toggleClass('flip').siblings().toggle().parent().toggleClass('collapsed');
      this.items['animate'].toggleClass('minimized');
      if (this.items['hide'].hasClass('flip')) {
        return this.items['reset'].hide();
      } else if (this.items['edit'].hasClass('open')) {
        return this.items['reset'].show();
      }
    };

    Controls.prototype.toggleMirrors = function(e) {
      if (e != null) {
        e.stopPropagation();
      }
      if (!this.pixelate) {
        this.items['kaleidoscope'].toggleClass('active');
        this.world.renderer.reflecting = !this.world.renderer.reflecting;
        if (!this.world.renderer.reflecting) {
          $(this.world.renderer.cnvs).show();
          $(this.world.renderer.mirror).hide();
          return this.world.renderer.mctx.clearRect(0, 0, this.world.width, this.world.height);
        } else {
          $(this.world.renderer.cnvs).hide();
          $(this.world.renderer.mirror).show();
          if (!this.playing) {
            return this.world.renderer.render(this.world.physics);
          }
        }
      }
    };

    Controls.prototype.togglePause = function(e) {
      if (!this.playing) {
        return this.play();
      } else {
        return this.pause();
      }
    };

    Controls.prototype.togglePixelate = function(e) {
      if (e != null) {
        e.stopPropagation();
      }
      this.items['pixelate'].toggleClass('active');
      this.pixelate = !this.pixelate;
      if (this.pixelate) {
        return this.updatePixelate();
      } else {
        $(this.world.renderer.cnvs).fadeIn(0);
        $(this.world.renderer.mirror).fadeIn(0);
        return $('#' + this.pixelImgId).remove();
      }
    };

    Controls.prototype.toggleThemes = function(e) {
      if (e != null) {
        e.stopPropagation();
      }
      this.items['colors'].toggleClass('active');
      return this.themes.slideToggle('fast');
    };

    Controls.prototype.update = function(time) {
      requestAnimationFrame(this.update);
      if (this.playing && this.world) {
        this.world.step();
        return this.removeSpring(time);
      }
    };

    Controls.prototype.updatePixelate = function() {
      var data, img,
        _this = this;
      if (this.world.renderer.reflecting) {
        data = this.world.renderer.mirror.toDataURL('png/image');
      } else {
        data = this.world.renderer.cnvs.toDataURL('png/image');
      }
      img = document.createElement('img');
      img.src = data;
      img.id = this.pixelImgId;
      img.style.opacity = 0;
      img.addEventListener('load', function() {
        img.closePixelate([
          {
            shape: 'square',
            resolution: 18,
            size: 20,
            offset: 0,
            alpha: 0.271
          }, {
            shape: 'diamond',
            resolution: 18,
            size: 38,
            offset: 0,
            alpha: 0.651
          }
        ]);
        $('#' + _this.pixelImgId).css('opacity', 1);
        $(_this.world.renderer.cnvs).fadeOut(0);
        return $(_this.world.renderer.mirror).fadeOut(0);
      }, false);
      return this.world.container.appendChild(img);
    };

    return Controls;

  })();

  $('body').height(window.innerHeight + 100 + 'px');

  window.scrollTo(0, 1);

  $('body').height(window.innerHeight + 'px');

  k_world = new World();

  k_world.init(document.getElementById('viewport'), new Renderer());

  k_interface = new Controls();

  k_interface.init(k_world);

  k_interface.world.addShape('circle');

}).call(this);
